openapi: 3.0.0
info:
  version: "1.0.0"
  title: superbiddo-api
  description: The API for superbiddo
paths:
  /api:
    get:
      summary: Get the current API version.
      responses:
        200:
          description: The current API version.
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
  /api/v1/csrfToken:
    get:
      summary: Get a new CSRF token.
      responses:
        200:
          description: The new CSRF token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  csrfToken:
                    type: string
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
  /api/v1/accounts:
    post:
      summary: Create a new account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Account"
      responses:
        201:
          description: The newly created account.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        400:
          $ref: "#/components/responses/BadRequest"
        409:
          $ref: "#/components/responses/Conflict"
        500:
          $ref: "#/components/responses/InternalServerError"
  /api/v1/accounts/{accountId}/address:
    put:
      summary: Update the address of an account.
      parameters:
        - name: accountId
          in: path
          description: The uuid of an account.
          required: true
          schema:
            type: string
            format: uuid
        - name: sessionToken
          in: query
          description: The session token for google maps api.
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - placeId
              properties:
                placeId:
                  type: string
      responses:
        200:
          description: The updated address string and latitude/longitude generated by google maps api.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Address"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"
  /api/v1/session:
    get:
      summary: Get the current session details.
      responses:
        200:
          description: The current session.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create a new session.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  $ref: "#/components/schemas/Email"
                password:
                  $ref: "#/components/schemas/Password"
      responses:
        201:
          description: The newly created session.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
        401:
          $ref: "#/components/responses/Unauthorized"
        409:
          $ref: "#/components/responses/Conflict"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: End the current session.
      responses:
        204:
          description: Successfully ended session.
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /api/v1/images:
    post:
      summary: Upload a new image. Send multipart/form-data with image field.
      # commented: including causes errors with express-openapi-validator
      # requestBody:
      #   required: true
      #   content:
      #     multipart/form-data:
      #       schema:
      #         type: object
      #         properties:
      #           image:
      #             type: string
      #             format: binary
      responses:
        201:
          description: The newly uploaded image.
          content:
            application/json:
              schema:
                type: object
                properties:
                  imageUrl:
                    $ref: "#/components/schemas/ImageUrl"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"
  /api/v1/images/{imageUrl}/geminiDetails:
    get:
      summary: Get the details of an image from Gemini.
      parameters:
        - name: imageUrl
          in: path
          description: The url of an image.
          required: true
          schema:
            $ref: "#/components/schemas/ImageUrl"
      responses:
        200:
          description: The details of the image from Gemini.
          content:
            application/json:
              schema:
                type: object
                properties:
                  geminiDetails:
                    type: object
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /api/v1/auctions:
    get:
      summary: Get auctions. Query params can be used to filter and order results.
      parameters:
        - in: query
          name: auctioneerId
          description: The uuid of an auctioneer. If provided, only auctions by this auctioneer will be returned. May be different from signed in user id.
          required: false
          schema:
            type: string
            format: uuid
        - in: query
          name: recommendedFor
          description: If provided, only auctions that are recommended for the provided user will be returned. Must match signed in user id.
          required: false
          schema:
            type: string
            format: uuid
        - in: query
          name: includeBidStatusFor
          description: The uuid of a bidder. If provided, the bid status of the bidder will be included in the response for each auction. Must match signed in user id.
          required: false
          schema:
            type: string
            format: uuid
        - in: query
          name: includeWatchingFor
          description: The uuid of a user. If provided, the watched status of the user will be included in the response for each auction. Must match signed in user id.
          required: false
          schema:
            type: string
            format: uuid
        - in: query
          name: watchedBy
          description: The uuid of a user. If provided, only auctions that this user is watching will be returned. Must match signed in user id.
          required: false
          schema:
            type: string
            format: uuid
        - in: query
          name: name
          description: The name of an auction. If provided, auctions' names will be compared with the provided name and included if they surpass a similarity threshold.
          required: false
          schema:
            type: string
        - in: query
          name: auctionStatus
          description: The status of an auction. If provided, only auctions with this status will be returned.
          required: false
          schema:
            oneOf:
              - $ref: "#/components/schemas/AuctionStatus"
              - type: array
                items:
                  $ref: "#/components/schemas/AuctionStatus"
        - in: query
          name: bidStatus
          description: The bid status of an auction. Ignored if includeBidStatusFor is not provided. If both are provided, only auctions where the bidder's bid matches the provided status will be returned.
          required: false
          schema:
            oneOf:
              - $ref: "#/components/schemas/BidStatus"
              - type: array
                items:
                  $ref: "#/components/schemas/BidStatus"
        - in: query
          name: minMinNewBidPrice
          description: The minimum smallest bid (current bid plus spread) of an auction. If provided, auctions with smallest bids below this value will be excluded.
          required: false
          schema:
            type: number
            format: float
        - in: query
          name: maxMinNewBidPrice
          description: The maximum smallest bid (current bid plus spread) of an auction. If provided, auctions with smallest bids above this value will be excluded.
          required: false
          schema:
            type: number
            format: float
        - in: query
          name: minStartTime
          description: The minimum start time of an auction. If provided, auctions with start times before this value will be excluded.
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: maxStartTime
          description: The maximum start time of an auction. If provided, auctions with start times after this value will be excluded.
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: minEndTime
          description: The minimum end time of an auction. If provided, auctions with end times before this value will be excluded.
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: maxEndTime
          description: The maximum end time of an auction. If provided, auctions with end times after this value will be excluded.
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: cardGame
          description: The game of a card in an auction. If provided, only auctions with cards from this game will be returned.
          required: false
          schema:
            oneOf:
              - type: string
              - type: array
                items:
                  type: string
        - in: query
          name: cardName
          description: The name of a card in an auction. If provided, auctions with cards with this name will be returned.
          required: false
          schema:
            oneOf:
              - type: string
              - type: array
                items:
                  type: string
        - in: query
          name: cardManufacturer
          description: The manufacturer of a card in an auction. If provided, only auctions with cards from this manufacturer will be returned.
          required: false
          schema:
            oneOf:
              - type: string
              - type: array
                items:
                  type: string
        - in: query
          name: cardQualityUngraded
          description: The ungraded quality of a card in an auction. If provided, only auctions with cards of this ungraded quality will be returned.
          required: false
          schema:
            oneOf:
              - $ref: "#/components/schemas/QualityUngraded"
              - type: array
                items:
                  $ref: "#/components/schemas/QualityUngraded"
        - in: query
          name: minCardQualityPsa
          description: The minimum PSA graded quality of a card in an auction. If provided, only auctions with cards of this PSA graded quality or higher will be returned.
          required: false
          schema:
            $ref: "#/components/schemas/QualityPsa"
        - in: query
          name: maxCardQualityPsa
          description: The maximum PSA graded quality of a card in an auction. If provided, only auctions with cards of this PSA graded quality or lower will be returned.
          required: false
          schema:
            $ref: "#/components/schemas/QualityPsa"
        - in: query
          name: cardRarity
          description: The rarity of a card in an auction. If provided, only auctions with cards of this rarity will be returned.
          required: false
          schema:
            oneOf:
              - $ref: "#/components/schemas/Rarity"
              - type: array
                items:
                  $ref: "#/components/schemas/Rarity"
        - in: query
          name: cardSet
          description: The set of a card in an auction. If provided, only auctions with cards from this set will be returned.
          required: false
          schema:
            oneOf:
              - type: string
              - type: array
                items:
                  type: string
        - in: query
          name: cardIsFoil
          description: Whether or not a card in an auction is foil. If provided, and true only auctions with foil cards will be returned. If provided, and false only auctions with non-foil cards will be returned. If not provided, all auctions will be returned.
          required: false
          schema:
            type: boolean
        - in: query
          name: bundleGame
          description: The game of a bundle in an auction. If provided, only auctions with bundles from this game will be returned.
          required: false
          schema:
            oneOf:
              - type: string
              - type: array
                items:
                  type: string
        - in: query
          name: bundleName
          description: The name of a bundle in an auction. If provided, auctions with bundles with this name will be returned.
          required: false
          schema:
            oneOf:
              - type: string
              - type: array
                items:
                  type: string
        - in: query
          name: bundleManufacturer
          description: The manufacturer of a bundle in an auction. If provided, only auctions with bundles from this manufacturer will be returned.
          required: false
          schema:
            oneOf:
              - type: string
              - type: array
                items:
                  type: string
        - in: query
          name: bundleSet
          description: The set of a bundle in an auction. If provided, only auctions with bundles from this set will be returned.
          required: false
          schema:
            oneOf:
              - type: string
              - type: array
                items:
                  type: string
        - in: query
          name: isBundle
          description: Whether or not the auction is a bundle. If provided, and true only auctions that are bundles will be returned. If provided, and false only auctions that are not bundles will be returned. If not provided, all auctions will be returned.
          required: false
          schema:
            type: boolean
        - in: query
          name: sortBy
          description: The field to sort auctions by. If provided, auctions will be sorted by this field. Will be sorted by auctionId ascending if not provided. If provided, will auctionId ascending will be secondary sorting field.
          required: false
          schema:
            type: string
            enum:
              - startPriceAsc
              - startPriceDesc
              - currentBidAsc
              - currentBidDesc
              - minNewBidPriceAsc
              - minNewBidPriceDesc
              - startTimeAsc
              - startTimeDesc
              - endTimeAsc
              - endTimeDesc
              - numBidsAsc
              - numBidsDesc
        - in: query
          name: page
          description: The page of auctions to return. If provided, the auctions will be paginated and only the auctions on this page will be returned. If not provided, default of 1 will be used. If pageSize is not provided with this parameter, default of 20 will be used.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 1
        - in: query
          name: pageSize
          description: The number of auctions to return per page. If provided, the auctions will be paginated and only this many auctions will be returned per page. If not provided, default of 20 will be used.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 20
      responses:
        200:
          description: Auctions matching query params.
          content:
            application/json:
              schema:
                type: object
                properties:
                  auctions:
                    type: array
                    items:
                      $ref: "#/components/schemas/Auction"
                  totalNumAuctions:
                    type: integer
                    minimum: 0
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create a new auction.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Auction"
      responses:
        201:
          description: The newly created auction.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Auction"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
        500:
          $ref: "#/components/responses/InternalServerError"
  /api/v1/auctions/{auctionId}:
    get:
      summary: Get an auction by its auctionId. Long polling is supported by providing the id of the current leading bid.
      parameters:
        - name: auctionId
          in: path
          description: The uuid of an auction.
          required: true
          schema:
            type: string
            format: uuid
        - name: includeBidStatusFor
          in: query
          description: The uuid of a bidder. If provided, the bid status of the bidder will be included in the response. Must match signed in user id.
          required: false
          schema:
            type: string
            format: uuid
        - name: includeWatchingFor
          in: query
          description: The uuid of a user. If provided, the watched status of the user will be included in the response. Must match signed in user id.
          required: false
          schema:
            type: string
            format: uuid
        - name: longPollMaxBidId
          in: query
          description: The uuid of the current bid. If provided, and the current leading bid on the auction is the provided id, the request will not return immediately. Instead, it will wait until a new bid is placed on the auction.
          required: false
          schema:
            oneOf:
              - type: string
                format: uuid
              - type: string
                enum:
                  - "null"
      responses:
        200:
          description: The auction with the provided auctionId.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Auction"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    patch:
      summary: Update an auction by its auctionId. Only the auctioneer can update an auction. The auction must not have started yet. Bundle properties will be ignored if the auction is a card auction and vice versa.
      parameters:
        - name: auctionId
          in: path
          description: The uuid of an auction.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 100
                description:
                  type: string
                  nullable: true
                  maxLength: 500
                startPrice:
                  type: number
                  format: float
                  minimum: 0
                spread:
                  type: number
                  format: float
                  minimum: 0
                startTime:
                  type: string
                  format: date-time
                endTime:
                  type: string
                  format: date-time
                cardName:
                  type: string
                  maxLength: 100
                cardDescription:
                  type: string
                  nullable: true
                  maxLength: 500
                cardManufacturer:
                  type: string
                  maxLength: 100
                cardSet:
                  type: string
                  maxLength: 100
                cardIsFoil:
                  type: boolean
                cardGame:
                  type: string
                  maxLength: 100
                cardQualityUngraded:
                  $ref: "#/components/schemas/QualityUngraded"
                cardQualityPsa:
                  $ref: "#/components/schemas/QualityPsa"
                cardRarity:
                  $ref: "#/components/schemas/Rarity"
                bundleName:
                  type: string
                  maxLength: 100
                bundleDescription:
                  type: string
                  nullable: true
                  maxLength: 500
                bundleManufacturer:
                  type: string
                  maxLength: 100
                bundleSet:
                  type: string
                  maxLength: 100
                bundleGame:
                  type: string
                  maxLength: 100
      responses:
        200:
          description: The updated auction.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Auction"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Remove the auction
      parameters:
        - name: auctionId
          in: path
          description: The uuid of an auction.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Successfully removed auction.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
        500:
          $ref: "#/components/responses/InternalServerError"
  /api/v1/auctions/{auctionId}/watchers:
    post:
      summary: Add a watcher to this auction.
      parameters:
        - name: auctionId
          in: path
          description: The uuid of an auction.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - watcherId
              properties:
                watcherId:
                  type: string
                  format: uuid
      responses:
        201:
          description: The newly added watcher.
          content:
            application/json:
              schema:
                type: object
                properties:
                  watcherId:
                    type: string
                    format: uuid
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
        500:
          $ref: "#/components/responses/InternalServerError"
  /api/v1/auctions/{auctionId}/watchers/{accountId}:
    delete:
      summary: Remove the watcher from this auction.
      parameters:
        - name: auctionId
          in: path
          description: The uuid of an auction.
          required: true
          schema:
            type: string
            format: uuid
        - name: accountId
          in: path
          description: The uuid of an account.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Successfully removed watcher.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /api/v1/auctions/{auctionId}/bids:
    get:
      summary: Get bids for an auction by its auctionId.
      parameters:
        - name: auctionId
          in: path
          description: The uuid of an auction.
          required: true
          schema:
            type: string
            format: uuid
        - name: summary
          in: query
          description: If provided, only aggregate data about each bidder will be returned. If not provided, all bids will be returned.
          required: false
          schema:
            type: boolean
        - name: page
          in: query
          description: The page of bids to return. If provided, the bids will be paginated and only the bids on this page will be returned. If not provided, default of 1 will be used. If pageSize is not provided with this parameter, default of 20 will be used.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          description: The number of bids to return per page. If provided, the bids will be paginated and only this many bids will be returned per page. If not provided, default of 20 will be used.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 20
      responses:
        200:
          description: Bids for the auction with the provided auctionId.
          content:
            application/json:
              schema:
                allOf:
                  - oneOf:
                      - type: object
                        required:
                          - bids
                        properties:
                          bids:
                            type: array
                            items:
                              $ref: "#/components/schemas/Bid"
                      - type: object
                        required:
                          - summary
                        properties:
                          summary:
                            type: array
                            items:
                              type: object
                              required:
                                - bidder
                                - bids
                                - highBid
                                - lastBidTime
                              properties:
                                bidder:
                                  type: string
                                bids:
                                  type: integer
                                  minimum: 0
                                highBid:
                                  type: number
                                  format: float
                                  minimum: 0
                                lastBidTime:
                                  type: string
                                  format: date-time
                  - type: object
                    properties:
                      totalNumBids:
                        type: integer
                        minimum: 0
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create a new bid.
      parameters:
        - name: auctionId
          in: path
          description: The uuid of an auction.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - bidderId
                - amount
              properties:
                bidderId:
                  type: string
                  format: uuid
                amount:
                  type: number
                  format: float
                  minimum: 0
      responses:
        201:
          description: The newly created bid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bid"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
        500:
          $ref: "#/components/responses/InternalServerError"
  /api/v1/oauth/google:
    get:
      summary: Get the Google OAuth URL.
      responses:
        200:
          description: The Google OAuth URL.
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
  /api/v1/oauth/callback:
    get:
      summary: Handle the Google OAuth callback.
      parameters:
        - name: code
          in: query
          description: The code provided by Google.
          allowReserved: true
          schema:
            type: string
        - name: scope
          in: query
          description: The scope provided by Google.
          allowReserved: true
          schema:
            type: string
        - name: authuser
          in: query
          description: The authuser provided by Google.
          allowReserved: true
          schema:
            type: string
        - name: prompt
          in: query
          description: The prompt provided by Google.
          allowReserved: true
          schema:
            type: string
      responses:
        200:
          description: The session details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
        500:
          $ref: "#/components/responses/InternalServerError"
components:
  schemas:
    Account:
      type: object
      description: All data associated with an account.
      required:
        - accountId
        - username
        - email
        - password
      properties:
        accountId:
          readOnly: true
          type: string
          format: uuid
        username:
          $ref: "#/components/schemas/Username"
        email:
          $ref: "#/components/schemas/Email"
        password:
          writeOnly: true
          allOf:
            - $ref: "#/components/schemas/Password"
    Address:
      type: object
      required:
        - addressFormatted
        - latitude
        - longitude
      properties:
        addressFormatted:
          type: string
        latitude:
          $ref: "#/components/schemas/Latitude"
        longitude:
          $ref: "#/components/schemas/Longitude"
    Username:
      type: string
      minLength: 3
      maxLength: 80
      pattern: '[^!*''();:@&=+$,/?%#[\]\s]{3,80}' #can't contain any url reserved characters
    Password:
      type: string
      minLength: 8
      maxLength: 50
      pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,50}$' #must contain lowercase, uppercase, number
    Latitude:
      type: number
      format: float
      maximum: 90
      minimum: -90
    Longitude:
      type: number
      format: float
      maximum: 180
      minimum: -180
    Email:
      type: string
      format: email
      maxLength: 80
    Auction:
      allOf:
        - type: object
          required:
            - auctionId
            - auctioneerId
            - auctioneer
            - name
            - startPrice
            - spread
            - minNewBidPrice
            - topBid
            - numBids
            - auctionStatus
          properties:
            auctionId:
              readOnly: true
              type: string
              format: uuid
            auctioneerId:
              writeOnly: true
              type: string
              format: uuid
            auctioneer:
              readOnly: true
              allOf:
                - $ref: "#/components/schemas/Account"
                - type: object
                  required:
                    - address
                  properties:
                    address:
                      $ref: "#/components/schemas/Address"
            name:
              type: string
              maxLength: 100
            description:
              type: string
              nullable: true
              maxLength: 500
            startPrice:
              type: number
              format: float
              minimum: 0
            spread:
              type: number
              format: float
              minimum: 0
            minNewBidPrice:
              readOnly: true
              type: number
              format: float
              minimum: 0
            topBid:
              readOnly: true
              oneOf:
                - $ref: "#/components/schemas/Bid"
                - enum:
                    - null
            numBids:
              readOnly: true
              type: integer
              minimum: 0
            auctionStatus:
              readOnly: true
              allOf:
                - $ref: "#/components/schemas/AuctionStatus"
            bidStatus:
              readOnly: true
              allOf:
                - $ref: "#/components/schemas/BidStatus"
          not:
            required:
              - cards
              - bundle
        - oneOf:
            - type: object
              required:
                - cards
              properties:
                cards:
                  type: array
                  items:
                    $ref: "#/components/schemas/Card"
            - type: object
              required:
                - bundle
              properties:
                bundle:
                  $ref: "#/components/schemas/Bundle"
        - oneOf:
            # both present
            - type: object
              required:
                - startTime
                - endTime
              properties:
                startTime:
                  type: string
                  format: date-time
                endTime:
                  type: string
                  format: date-time
            # neither present
            - type: object
              not:
                anyOf:
                  - required:
                      - startTime
                  - required:
                      - endTime
            # both present and both null (neither not null)
            - type: object
              required:
                - startTime
                - endTime
              properties:
                startTime:
                  enum:
                    - null
                endTime:
                  enum:
                    - null
    Card:
      allOf:
        - $ref: "#/components/schemas/CardBase"
        - oneOf:
            - type: object
              properties:
                game:
                  type: string
                  enum:
                    - "MTG"
                rarity:
                  $ref: "#/components/schemas/MTGRarity"
            - type: object
              properties:
                game:
                  type: string
                  enum:
                    - "Pokemon"
                rarity:
                  $ref: "#/components/schemas/PokemonRarity"
            - type: object
              properties:
                game:
                  type: string
                  enum:
                    - "Yugioh"
                rarity:
                  $ref: "#/components/schemas/YugiohRarity"
    PokemonCard:
      type: object
      properties:
        game:
          type: string
          enum:
            - "Pokemon"
        rarity:
          $ref: "#/components/schemas/PokemonRarity"
    YugiohCard:
      type: object
      properties:
        game:
          type: string
          enum:
            - "Yugioh"
        rarity:
          $ref: "#/components/schemas/YugiohRarity"
    CardBase:
      allOf:
        - type: object
          required:
            - cardId
            - name
            - manufacturer
            - set
            - isFoil
            - imageUrl
          properties:
            cardId:
              readOnly: true
              type: string
              format: uuid
            name:
              type: string
              maxLength: 100
            description:
              type: string
              nullable: true
              maxLength: 500
            manufacturer:
              type: string
              maxLength: 100
            set:
              type: string
              maxLength: 100
            isFoil:
              type: boolean
            imageUrl:
              $ref: "#/components/schemas/ImageUrl"
        - $ref: "#/components/schemas/CardQuality"
    CardQuality:
      not:
        required:
          - qualityUngraded
          - qualityPsa
      oneOf:
        - type: object
          required:
            - qualityUngraded
          properties:
            qualityUngraded:
              $ref: "#/components/schemas/QualityUngraded"
        - type: object
          required:
            - qualityPsa
          properties:
            qualityPsa:
              $ref: "#/components/schemas/QualityPsa"
    AuctionStatus:
      type: string
      enum:
        - Not scheduled
        - Scheduled
        - Ongoing
        - Successful
        - Unsuccessful
    BidStatus:
      type: string
      enum:
        - Not bid (ended)
        - Not bid
        - Leading
        - Outbid
        - Won
        - Lost
    Bundle:
      type: object
      required:
        - bundleId
        - game
        - name
        - manufacturer
        - set
        - imageUrl
      properties:
        bundleId:
          readOnly: true
          type: string
          format: uuid
        game:
          type: string
          maxLength: 100
        name:
          type: string
          maxLength: 100
        description:
          type: string
          nullable: true
          maxLength: 500
        manufacturer:
          type: string
          maxLength: 100
        set:
          type: string
          maxLength: 100
        imageUrl:
          $ref: "#/components/schemas/ImageUrl"
    Bid:
      type: object
      required:
        - bidId
        - auctionId
        - bidderId
        - bidder
        - amount
        - timestamp
      properties:
        bidId:
          readOnly: true
          type: string
          format: uuid
        auctionId:
          type: string
          format: uuid
        bidderId:
          writeOnly: true
          type: string
          format: uuid
        bidder:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/Account"
        amount:
          type: number
          format: float
          minimum: 0
        timestamp:
          readOnly: true
          type: string
          format: date-time
    QualityUngraded:
      type: string
      enum:
        - Mint
        - Near Mint
        - Lightly Played
        - Moderately Played
        - Heavily Played
        - Damaged
    QualityPsa:
      type: integer
      minimum: 1
      maximum: 10
    Rarity:
      anyOf:
        - $ref: "#/components/schemas/MTGRarity"
        - $ref: "#/components/schemas/PokemonRarity"
        - $ref: "#/components/schemas/YugiohRarity"
    MTGRarity:
      type: string
      enum:
        - Common
        - Uncommon
        - Rare
        - Mythic Rare
        - Special / Bonus Cards
        - Basic Land
        - Masterpiece Series
        - Promos
        - Extended Art
        - Borderless
    PokemonRarity:
      type: string
      enum:
        - Common
        - Uncommon
        - Rare
        - Holo Rare
        - Reverse Holo
        - Rare Holo V
        - Ultra Rare
        - Full Art
        - Secret Rare
        - Amazing Rare
        - Rainbow Rare
        - Gold Secret Rare
        - Promos
        - Radiant Collection
    YugiohRarity:
      type: string
      enum:
        - Common
        - Rare
        - Super Rare
        - Ultra Rare
        - Secret Rare
        - Ultimate Rare
        - Ghost Rare
        - Starlight Rare
        - Collector's Rare
        - Prismatic Secret Rare
        - Parallel Rare
        - Platinum Rare
    ImageUrl:
      type: string
      format: uri
      # gcs prefix, uuid, dot, file extension
      pattern: ^https://storage\.googleapis\.com/superbiddo-bucket-0/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\..{1,13}$
    Errors:
      type: array
      items:
        $ref: "#/components/schemas/Error"
    Error:
      type: object
      required:
        - path
        - message
      properties:
        path:
          type: string
        message:
          type: string
        detail:
          type: string
    Session:
      allOf:
        - $ref: "#/components/schemas/Account"
        - type: object
          properties:
            address:
              $ref: "#/components/schemas/Address"
  responses:
    BadRequest:
      description: request format is invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"
    Unauthorized:
      description: action requires authentication
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"
    Forbidden:
      description: insufficient permission for this action
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"
    NotFound:
      description: specified resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"
    Conflict:
      description: request has correct format but data currently conflicts
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"
    InternalServerError:
      description: error processing request on server
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"

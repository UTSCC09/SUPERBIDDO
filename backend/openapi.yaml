openapi: 3.0.0
info:
  version: "1.0.0"
  title: superbiddo-api
  description: The API for superbiddo
paths:
  /api:
    get:
      summary: Get the current API version.
      responses:
        200:
          description: The current API version.
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
  /api/v1/accounts:
    post:
      summary: Create a new account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Account"
      responses:
        201:
          description: The newly created account.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        400:
          $ref: "#/components/responses/BadRequest"
  /api/v1/session:
    get:
      summary: Get the current session details.
      responses:
        200:
          description: The current session.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
        404:
          $ref: "#/components/responses/NotFound"
    post:
      summary: Create a new session.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  $ref: "#/components/schemas/Email"
                password:
                  $ref: "#/components/schemas/Password"
      responses:
        201:
          description: The newly created session.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
        401:
          $ref: "#/components/responses/Unauthorized"
    delete:
      summary: End the current session.
      responses:
        204:
          description: Successfully ended session.
        404:
          $ref: "#/components/responses/NotFound"
  /api/v1/auctions:
    get:
      summary: Get auctions. Query params can be used to filter and order results.
      parameters:
        - in: query
          name: auctioneerId
          description: The uuid of an auctioneer. If provided, only auctions by this auctioneer will be returned. May be different from signed in user id.
          required: false
          schema:
            type: string
            format: uuid
        - in: query
          name: bidderId
          description: The uuid of a bidder. If provided, only auctions that this bidder has bid on will be returned. Must match signed in user id.
          required: false
          schema:
            type: string
            format: uuid
        - in: query
          name: savedBy
          description: The uuid of a user. If provided, only auctions that this user has saved will be returned. Must match signed in user id.
          required: false
          schema:
            type: string
            format: uuid
        - in: query
          name: name
          description: The name of an auction. If provided, auctions' names will be compared with the provided name and included if they surpass a similarity threshold.
          required: false
          schema:
            type: string
        - in: query
          name: minMinNewBidPrice
          description: The minimum smallest bid (current bid plus spread) of an auction. If provided, auctions with smallest bids below this value will be excluded.
          required: false
          schema:
            type: number
            format: float
        - in: query
          name: maxMinNewBidPrice
          description: The maximum smallest bid (current bid plus spread) of an auction. If provided, auctions with smallest bids above this value will be excluded.
          required: false
          schema:
            type: number
            format: float
        - in: query
          name: minStartTime
          description: The minimum start time of an auction. If provided, auctions with start times before this value will be excluded.
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: maxStartTime
          description: The maximum start time of an auction. If provided, auctions with start times after this value will be excluded.
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: minEndTime
          description: The minimum end time of an auction. If provided, auctions with end times before this value will be excluded.
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: maxEndTime
          description: The maximum end time of an auction. If provided, auctions with end times after this value will be excluded.
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: cardGame
          description: The game of a card in an auction. If provided, only auctions with cards from this game will be returned.
          required: false
          schema:
            type: string
        - in: query
          name: cardName
          description: The name of a card in an auction. If provided, auctions with cards with this name will be returned.
          required: false
          schema:
            type: string
        - in: query
          name: cardManufacturer
          description: The manufacturer of a card in an auction. If provided, only auctions with cards from this manufacturer will be returned.
          required: false
          schema:
            type: string
        - in: query
          name: cardQuality
          description: The quality of a card in an auction. If provided, only auctions with cards of this quality will be returned.
          required: false
          schema:
            type: string
            enum:
              - Mint
              - Near Mint
              - Excellent
              - Good
              - Lightly Played
              - Played
              - Poor
        - in: query
          name: cardRarity
          description: The rarity of a card in an auction. If provided, only auctions with cards of this rarity will be returned.
          required: false
          schema:
            type: string
            enum:
              - Common
              - Uncommon
              - Rare
              - Mythic Rare
              - Special
        - in: query
          name: cardSet
          description: The set of a card in an auction. If provided, only auctions with cards from this set will be returned.
          required: false
          schema:
            type: string
        - in: query
          name: cardIsFoil
          description: Whether or not a card in an auction is foil. If provided, and true only auctions with foil cards will be returned. If provided, and false only auctions with non-foil cards will be returned. If not provided, all auctions will be returned.
          required: false
          schema:
            type: boolean
        - in: query
          name: bundleGame
          description: The game of a bundle in an auction. If provided, only auctions with bundles from this game will be returned.
          required: false
          schema:
            type: string
        - in: query
          name: bundleName
          description: The name of a bundle in an auction. If provided, auctions with bundles with this name will be returned.
          required: false
          schema:
            type: string
        - in: query
          name: bundleManufacturer
          description: The manufacturer of a bundle in an auction. If provided, only auctions with bundles from this manufacturer will be returned.
          required: false
          schema:
            type: string
        - in: query
          name: bundleSet
          description: The set of a bundle in an auction. If provided, only auctions with bundles from this set will be returned.
          required: false
          schema:
            type: string
        - in: query
          name: isBundle
          description: Whether or not the auction is a bundle. If provided, and true only auctions that are bundles will be returned. If provided, and false only auctions that are not bundles will be returned. If not provided, all auctions will be returned.
          required: false
          schema:
            type: boolean
        - in: query
          name: sortBy
          description: The field to sort auctions by. If provided, auctions will be sorted by this field. Will be sorted by auctionId ascending if not provided. If provided, will auctionId ascending will be secondary sorting field.
          required: false
          schema:
            type: string
            enum:
              - startPriceAsc
              - startPriceDesc
              - currentBidAsc
              - currentBidDesc
              - minNewBidPriceAsc
              - minNewBidPriceDesc
              - startTimeAsc
              - startTimeDesc
              - endTimeAsc
              - endTimeDesc
        - in: query
          name: page
          description: The page of auctions to return. If provided, the auctions will be paginated and only the auctions on this page will be returned. If not provided, default of 1 will be used. If pageSize is not provided with this parameter, default of 20 will be used.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 1
        - in: query
          name: pageSize
          description: The number of auctions to return per page. If provided, the auctions will be paginated and only this many auctions will be returned per page. If not provided, default of 20 will be used.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 20
      responses:
        200:
          description: Auctions matching query params.
          content:
            application/json:
              schema:
                type: object
                properties:
                  auctions:
                    type: array
                    items:
                      $ref: "#/components/schemas/Auction"
                  totalNumAuctions:
                    type: integer
                    minimum: 0
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
    post:
      summary: Create a new auction.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Auction"
      responses:
        201:
          description: The newly created auction.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Auction"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
  /api/v1/auctions/{auctionId}:
    get:
      summary: Get an auction by its auctionId. Long polling is supported by providing the id of the current leading bid.
      parameters:
        - name: auctionId
          in: path
          description: The uuid of an auction.
          required: true
          schema:
            type: string
            format: uuid
        - name: longPollMaxBidId
          in: query
          description: The uuid of the current bid. If provided, and the current leading bid on the auction is the provided id, the request will not return immediately. Instead, it will wait until a new bid is placed on the auction.
          required: false
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: The auction with the provided auctionId.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Auction"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
  /api/v1/auctions/{auctionId}/bids:
    get:
      summary: Get bids for an auction by its auctionId.
      parameters:
        - name: auctionId
          in: path
          description: The uuid of an auction.
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: The page of bids to return. If provided, the bids will be paginated and only the bids on this page will be returned. If not provided, default of 1 will be used. If pageSize is not provided with this parameter, default of 20 will be used.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          description: The number of bids to return per page. If provided, the bids will be paginated and only this many bids will be returned per page. If not provided, default of 20 will be used.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 20
      responses:
        200:
          description: Bids for the auction with the provided auctionId.
          content:
            application/json:
              schema:
                type: object
                properties:
                  bids:
                    type: array
                    items:
                      $ref: "#/components/schemas/Bid"
                  totalNumBids:
                    type: integer
                    minimum: 0
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
    post:
      summary: Create a new bid.
      parameters:
        - name: auctionId
          in: path
          description: The uuid of an auction.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - bidderId
                - amount
              properties:
                bidderId:
                  type: string
                  format: uuid
                amount:
                  type: number
                  format: float
                  minimum: 0
      responses:
        201:
          description: The newly created bid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bid"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
components:
  schemas:
    Account:
      type: object
      description: All data associated with an account.
      required:
        - accountId
        - username
        - email
        - password
        # - address
      properties:
        accountId:
          readOnly: true
          type: string
          format: uuid
        username:
          $ref: "#/components/schemas/Username"
        email:
          $ref: "#/components/schemas/Email"
        password:
          writeOnly: true
          allOf:
            - $ref: "#/components/schemas/Password"
        # address:
        #   $ref: "#/components/schemas/Address"
    Address:
      type: object
      required:
        - address1
        - city
        - province
        - postalCode
        - latitude
        - longitude
      properties:
        address1:
          type: string
          maxLength: 80
        address2:
          type: string
          maxLength: 80
        address3:
          type: string
          maxLength: 80
        city:
          type: string
          maxLength: 35
        province:
          type: string
          enum:
            - Ontario
            - Quebec
            - British Columbia
            - Alberta
            - Manitoba
            - Saskatchewan
            - Nova Scotia
            - New Brunswick
            - Newfoundland and Labrador
            - Prince Edward Island
            - Northwest Territories
            - Yukon
            - Nunavut
        postalCode:
          type: string
          pattern: '^[ABCEGHJKLMNPRSTVXY]\d[ABCEGHJ-NPRSTV-Z]\d[ABCEGHJ-NPRSTV-Z]\d$'
        latitude:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/Latitude"
        longitude:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/Longitude"
    Username:
      type: string
      minLength: 3
      maxLength: 80
      pattern: '[^!*''();:@&=+$,/?%#[\]\s]{3,80}' #can't conatain any url reserved characters
    Password:
      type: string
      minLength: 8
      maxLength: 50
      pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,50}$' #must contain lowercase, uppercase, number
    Latitude:
      type: number
      format: float
      maximum: 90
      minimum: -90
    Longitude:
      type: number
      format: float
      maximum: 180
      minimum: -180
    Email:
      type: string
      format: email
      maxLength: 80
    Auction:
      allOf:
        - type: object
          required:
            - auctionId
            - auctioneerId
            - auctioneer
            - name
            - startPrice
            - spread
            - minNewBidPrice
            - topBid
            - numBids
          properties:
            auctionId:
              readOnly: true
              type: string
              format: uuid
            auctioneerId:
              writeOnly: true
              type: string
              format: uuid
            auctioneer:
              readOnly: true
              allOf:
                - $ref: "#/components/schemas/Account"
            name:
              type: string
              maxLength: 100
            description:
              type: string
              nullable: true
              maxLength: 500
            startPrice:
              type: number
              format: float
              minimum: 0
            spread:
              type: number
              format: float
              minimum: 0
            minNewBidPrice:
              readOnly: true
              type: number
              format: float
              minimum: 0
            topBid:
              readOnly: true
              oneOf:
                - $ref: "#/components/schemas/Bid"
                - type: string
                  nullable: true
                  enum:
                    - null
            numBids:
              readOnly: true
              type: integer
              minimum: 0
          not:
            required:
              - cards
              - bundle
        - oneOf:
            - type: object
              required:
                - cards
              properties:
                cards:
                  type: array
                  items:
                    $ref: "#/components/schemas/Card"
            - type: object
              required:
                - bundle
              properties:
                bundle:
                  $ref: "#/components/schemas/Bundle"
        - oneOf:
            - type: object
              required:
                - startTime
                - endTime
              properties:
                startTime:
                  type: string
                  format: date-time
                endTime:
                  type: string
                  format: date-time
            - type: object
              not:
                anyOf:
                  - required:
                      - startTime
                  - required:
                      - endTime
    Card:
      type: object
      required:
        - cardId
        - game
        - name
        - manufacturer
        - quality
        - rarity
        - set
        - isFoil
      properties:
        cardId:
          readOnly: true
          type: string
          format: uuid
        game:
          type: string
          maxLength: 100
        name:
          type: string
          maxLength: 100
        description:
          type: string
          nullable: true
          maxLength: 500
        manufacturer:
          type: string
          maxLength: 100
        quality:
          type: string
          enum:
            - Mint
            - Near Mint
            - Excellent
            - Good
            - Lightly Played
            - Played
            - Poor
        rarity:
          type: string
          enum:
            - Common
            - Uncommon
            - Rare
            - Mythic Rare
            - Special
        set:
          type: string
          maxLength: 100
        isFoil:
          type: boolean
    Bundle:
      type: object
      required:
        - bundleId
        - game
        - name
        - manufacturer
        - set
      properties:
        bundleId:
          readOnly: true
          type: string
          format: uuid
        game:
          type: string
          maxLength: 100
        name:
          type: string
          maxLength: 100
        description:
          type: string
          nullable: true
          maxLength: 500
        manufacturer:
          type: string
          maxLength: 100
        set:
          type: string
          maxLength: 100
    Bid:
      type: object
      required:
        - bidId
        - auctionId
        - bidderId
        - bidder
        - amount
        - timestamp
      properties:
        bidId:
          readOnly: true
          type: string
          format: uuid
        auctionId:
          type: string
          format: uuid
        bidderId:
          writeOnly: true
          type: string
          format: uuid
        bidder:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/Account"
        amount:
          type: number
          format: float
          minimum: 0
        timestamp:
          readOnly: true
          type: string
          format: date-time
    Errors:
      type: array
      items:
        $ref: "#/components/schemas/Error"
    Error:
      type: object
      required:
        - path
        - message
      properties:
        path:
          type: string
        message:
          type: string
        detail:
          type: string
    Session:
      allOf:
        - $ref: "#/components/schemas/Account"
  responses:
    BadRequest:
      description: request format is invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"
    Unauthorized:
      description: action requires authentication
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"
    Forbidden:
      description: insufficient permission for this action
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"
    NotFound:
      description: specified resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"
    Conflict:
      description: request has correct format but data currently conflicts
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"
    InternalServerError:
      description: error processing request on server
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"
